#!/usr/bin/env bash

: ${ASDF_DATA_DIR:=${HOME}/.asdf}
: ${ASDF_PLUGIN_PATH:=${ASDF_DATA_DIR}/plugins/redis}

install_redis() {
  local install_type=$1
  local version=$2
  local install_path=$3

  local openssl_prefix

  if [ "$TMPDIR" = "" ]; then
    local tmp_download_dir=$(mktemp -d)
  else
    local tmp_download_dir=$TMPDIR
  fi

  local source_path=$(get_download_file_path $install_type $version $tmp_download_dir)
  download_source $install_type $version $source_path

  # running this in a subshell
  # because we don't want to disturb current working dir
  (
    cd $(dirname $source_path)
    tar zxf $source_path || exit 1
    cd $(untar_path $install_type $version $tmp_download_dir)

    # Make a minor fix that solves problems when newer versions of Lua are
    # installed on the system
    patch -Np1 -i "${ASDF_PLUGIN_PATH}/lib/adjust-include-paths.patch" || exit 1

    if [[ -n "${REDIS_APPLY_PATCHES:-}" ]]; then
      apply_patches "$(fetch_patches "$REDIS_APPLY_PATCHES")"
    fi

    REDIS_CONFIGURE_OPTIONS=

    openssl_prefix=$(get_openssl_prefix)
    if [[ -z $openssl_prefix ]]; then
      echo "WARNING: OpenSSL is not available!" >&2
    else
      REDIS_CONFIGURE_OPTIONS="BUILD_TLS=yes OPENSSL_PREFIX=\"$openssl_prefix\" "
    fi

    REDIS_CONFIGURE_OPTIONS+=$REDIS_EXTRA_CONFIGURE_OPTIONS

    # set in os_based_configure_options
    # we unset it here because echo-ing changes the return value of the function
    unset ASDF_PKG_MISSING
    make PREFIX="$install_path" $REDIS_CONFIGURE_OPTIONS install || exit 1
  )
}

untar_path() {
  local install_type=$1
  local version=$2
  local tmp_download_dir=$3

  if [ "$install_type" = "version" ]
  then
    echo "$tmp_download_dir/redis-${version}"
  else
    echo "$tmp_download_dir/redis-${version}"
  fi
}


download_source() {
  local install_type=$1
  local version=$2
  local download_path=$3
  local download_url=$(get_download_url $install_type $version)

  curl -Lo $download_path $download_url
}


get_download_file_path() {
  local install_type=$1
  local version=$2
  local tmp_download_dir=$3
  local pkg_name="redis-${version}.tar.gz"

  echo "$tmp_download_dir/$pkg_name"
}


get_download_url() {
  local install_type=$1
  local version=$2
  echo "https://download.redis.io/releases/redis-${version}.tar.gz"
}


fetch_patches() {
  while read -r line; do
    if [ "$line" = "" ]; then continue; fi
    if [[ "$line" =~ ^[Hh][Tt][Tt][Pp][Ss]?:// ]]; then
      >&2 echo "Using patch from URL: $line"
      curl -fSs "$line" || exit 1
    else
      local abs_path
      abs_path="$(get_absolute_path "$line")"
      >&2 echo "Using local patch: $abs_path"
      cat "$abs_path" || exit 1
    fi
  done <<< "$@"
}


get_absolute_path() {
  local start_dir
  local rel_path
  local rel_dir
  local rel_base

  start_dir="$(pwd)"
  rel_path="$1"
  rel_dir="$(dirname "$rel_path")"
  rel_base="$(basename "$rel_path")"

  (
    cd "$start_dir" \
      && cd "$rel_dir" 2>/dev/null \
      && echo "$(pwd)/$rel_base" \
      || echo "$rel_path"
  )
}


apply_patches() {
  patches="$1"

  for patch_data in "${patches[@]}"; do
    echo "$patch_data" | patch -p1
    if [ $? -eq 0 ]; then
      echo "Patch applied successfully"
    else
      echo "Failed to apply patch: $patch_data"
    fi
  done
}

get_openssl_prefix() {
  local openssl_prefix

  # Linux and also MacPorts
  openssl_prefix=$(pkg-config --variable=prefix libcrypto 2>/dev/null);

  # Use OpenSSL from Homebrew
  if [[ -z $openssl_prefix ]]; then
    # Attempt to find HOMEBREW_PREFIX if the var is not set
    if [[ -z $HOMEBREW_PREFIX ]]; then
      HOMEBREW_PREFIX=$(brew --prefix 2>/dev/null)
    fi

    if [[ -z $openssl_prefix && -d "$HOMEBREW_PREFIX/opt" ]]; then
      if [[ -d "$HOMEBREW_PREFIX/opt/openssl@3" ]]; then
        export HOMEBREW_PREFIX
        openssl_prefix="$HOMEBREW_PREFIX/opt/openssl@3"
      elif [[ -d "$HOMEBREW_PREFIX/opt/openssl" ]]; then
        export HOMEBREW_PREFIX
        openssl_prefix="$HOMEBREW_PREFIX/opt/openssl"
      fi
    fi
  fi

  echo "$openssl_prefix"
}

install_redis "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"
